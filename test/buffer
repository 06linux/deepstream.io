  it('sends an error for invalid subscription messages', () => {
    const socketWrapper = new SocketWrapper(new SocketMock(), {})
    const invalidMessage = {
      topic: C.TOPIC.EVENT,
      action: C.ACTIONS.SUBSCRIBE,
      raw: 'rawMessageString'
    }

    eventHandler.handle(socketWrapper, invalidMessage)
    expect(socketWrapper.socket.lastSentMessage).toBe(_msg('E|E|INVALID_MESSAGE_DATA|rawMessageString+'))
  })

    it('sends an error for subscription messages without an event name', () => {
    const socketWrapper = new SocketWrapper(new SocketMock(), {})
    const invalidMessage = {
      topic: C.TOPIC.EVENT,
      action: C.ACTIONS.SUBSCRIBE,
      raw: 'rawMessageString',
      data: []
    }

    eventHandler.handle(socketWrapper, invalidMessage)
    expect(socketWrapper.socket.lastSentMessage).toBe(_msg('E|E|INVALID_MESSAGE_DATA|rawMessageString+'))
  })

      it('sends an error for subscription messages with an invalid action', () => {
    const socketWrapper = new SocketWrapper(new SocketMock(), {})
    const invalidMessage = {
      topic: C.TOPIC.EVENT,
      action: 'giberrish',
      raw: 'rawMessageString',
      data: []
    }

    eventHandler.handle(socketWrapper, invalidMessage)
    expect(socketWrapper.socket.lastSentMessage).toBe(_msg('E|E|UNKNOWN_ACTION|unknown action giberrish+'))
  })

        it('sends errors for invalid messages', () => {
    const socketA = new SocketWrapper(new SocketMock(), {})

    eventHandler.handle(socketA, {
      topic: C.TOPIC.EVENT,
      action: C.ACTIONS.EVENT,
      raw: 'rawMessageString',
      data: []
    })

    expect(socketA.socket.lastSentMessage).toBe(_msg('E|E|INVALID_MESSAGE_DATA|rawMessageString+'))
  })

          it('sends errors for invalid messages', () => {
    const socketA = new SocketWrapper(new SocketMock(), {})

    eventHandler.handle(socketA, {
      topic: C.TOPIC.EVENT,
      action: C.ACTIONS.EVENT,
      data: []
    })

    expect(socketA.socket.lastSentMessage).toBe(_msg('E|E|INVALID_MESSAGE_DATA|rawMessageString+'))
  })
