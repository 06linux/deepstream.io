#!/usr/bin/env node
'use strict';

const colors = require( 'colors' );
const fs = require( 'fs' );
const os = require( 'os' );
const path = require( 'path' );
const child_process = require( 'child_process' );
const Deepstream = require( '../src/deepstream.io.js' );
const pidHelper = require( './pid-helper' );

var program = require( 'commander' );

program
	.option( '-c, --config [file]', 'configration file, parent directory will be used as prefix for other config files' )
	.option( '-l, --libPrefix [directory]', 'path where to lookup for plugins like connectors and logger' )
	.option( '-d, --detach', 'detach the deepstream server process' );

function detachErrorHandler() {
	console.error( 'Error during detaching the deepstream process, run without --detach'.red );
	process.exit( 1 );
}

program.parse( process.argv );
process.deepstreamCLI = program;

if ( program.detach ) {
	// --detach is not supported for windows
	if ( os.platform() === 'win32' ) {
		console.error( 'detached mode not supported on windows' );
		process.exit( 1 );
	}
	// proxy arguments from commander to the spawing process
	const args = [];
	if ( program.config != null ) {
		args.push( '--config' );
		args.push( program.config );
	}
	if ( program.libPrefix != null ) {
		args.push( '--libPrefix' );
		args.push( program.libPrefix );
	}
	// ensure there is no pid file with a running process
	pidHelper.ensureNotRunning( function( err ) {
		if ( err ) {
			return pidHelper.exit( err );
		}
		const child = child_process.spawn( path.resolve( __dirname, 'deepstream-start' ), args, {
			detached: true,
			stdio: [ 'ignore']
		} );
		const WAIT_FOR_ERRORS = 2000;
		// register handler if the child process will fail within WAIT_FOR_ERRORS period
		child.on( 'close', detachErrorHandler );
		child.on( 'exit', detachErrorHandler );
		child.unref();
		// wait, maybe ther is an error during startup
		setTimeout( function() {
			console.log( 'process was detached with pid ' + child.pid );
			process.exit( 0 );
		}, WAIT_FOR_ERRORS );
	} );
} else {
	// non-detach casee
	var ds = new Deepstream( null, program );
	ds.start();
	process.
		removeAllListeners( 'SIGINT' ).on( 'SIGINT', pidHelper.exit ).
		removeAllListeners( 'SIGTERM' ).on( 'SIGTERM', pidHelper.exit );
	pidHelper.save( process.pid );

}
